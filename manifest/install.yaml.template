apiVersion: batch/v1
kind: Job
metadata:
  annotations:
  name: tsb-installer-job
  labels:
    app.kubernetes.io/name: $name
    app.kubernetes.io/component: tsb-installer-job
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 0
  completions: 1
  parallelism: 1
  template:
    spec:
      serviceAccountName: $service_account
      containers:
      - command:
        - "/bin/bash"
        - "-ec"
        - |
          export REGISTRY=$tsbImageRepo
          export TAG=$tsbImageTag
          
          envsubst '$REGISTRY $TAG' < all-in-one.template.yaml > all-in-one.yaml
          kubectl apply -f /data/artifacts/cert-manager.yaml
          kubectl wait pods --for condition=ready -n cert-manager --all --timeout=120s
          sleep 20
          kubectl apply -f /data/artifacts/api-service.yaml
          kubectl apply -f /data/artifacts/configmap.yaml
          kubectl apply -f /data/artifacts/operator-service-account-rbac.yaml
          kubectl apply -f /data/artifacts/postgres-operator.yaml
          sed  "s%#SC#%standard%g" /data/artifacts/pgsql.yaml.tpl > /data/artifacts/pgsql.yaml 
          kubectl apply -f /data/artifacts/pgsql.yaml
          sleep 15
          export PG_PASS=$(kubectl get secret -n default tsb-user.acid-minimal-cluster.credentials -o go-template='{{ .data.password | base64decode }}')
          echo "PG_PASS=" $PG_PASS
          kubectl apply -f /data/artifacts/all-in-one.yaml
          sleep 15
          kubectl -n elastic-system wait --for condition=ready --timeout=120s pod/elastic-operator-0
          sleep 5
          kubectl apply -f /data/artifacts/elastic.yaml
          sleep 30
          printf "Waiting for elastic-pods  to become ready "
          while ! kubectl wait pod -n elastic  --for condition=ready --timeout=60s --all; do
            echo "waiting for elasticsearch!"
            sleep 5
          done
          export ELASTIC_PASS=$(kubectl get secret -n elastic tsb-es-elastic-user -o go-template='{{ .data.elastic | base64decode }}')
          kubectl get secret -n elastic tsb-es-http-certs-public -o go-template='{{ index .data "ca.crt" | base64decode}}' > /data/artifacts/es-ca-cert.pem

          #install mp operator
          tctl install manifest management-plane-operator \
            --registry $REGISTRY | kubectl apply -f -
          sleep 5
          kubectl wait pods --for condition=ready -n tsb --all --timeout=120s
          tctl install manifest management-plane-secrets --tsb-admin-password admin --tsb-server-certificate "$(cat /data/artifacts/dummy.cert.pem)" --tsb-server-key "$(cat /data/artifacts/dummy.key.pem)" --postgres-username tsb_user --postgres-password $PG_PASS  --elastic-username elastic --elastic-password $ELASTIC_PASS --allow-defaults --elastic-ca-certificate "$(cat /data/artifacts/es-ca-cert.pem)" --xcp-certs > /data/artifacts/mpsecrets.yaml
          sleep 3
          kubectl apply -f /data/artifacts/mpsecrets.yaml
          sleep 20
          sed  "s%#HUB#%${REGISTRY}%g" /data/artifacts/mgp.yaml.tpl > /data/artifacts/mgp.yaml
          kubectl apply -f /data/artifacts/mgp.yaml
          sleep 20
          for i in `kubectl get pods -n tsb | grep -i teamsync | awk {'print $1'}`;do kubectl delete pod -n tsb  $i;sleep 4;done
          sleep 20
          kubectl wait pods --for condition=ready -n tsb --all --timeout=120s 
          sleep 15
          kubectl create job -n tsb teamsync-bootstrap --from=cronjob/teamsync
          kubectl wait --for=condition=complete job/teamsync-bootstrap -n tsb
          MP_ADDRESS=$(kubectl get svc -n tsb envoy -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo -e "Management Plane created successfully. \n address: ${MP_ADDRESS} \n user: admin \n password: $tsb_password"
          sleep 10
          gcloud container clusters get-credentials $cluster_name --zone $zone --project $project
          KUBE_CONTEXT="gke_${project}_${zone}_${cluster_name}"

          kubectl config use-context ${KUBE_CONTEXT}

          MP_ADDRESS=$(kubectl get svc -n tsb envoy -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          export ELASTIC_PASS=$(kubectl get secret -n elastic tsb-es-elastic-user -o go-template='{{ .data.elastic | base64decode }}')
          tctl config clusters set $mp_cluster --bridge-address ${MP_ADDRESS}:8443 --tls-insecure

          tctl config profiles set $mp_cluster --cluster $mp_cluster

          tctl config profiles  set-current $mp_cluster

          TCTL_LOGIN_ORG=tetrate TCTL_LOGIN_TENANT=tetrate TCTL_LOGIN_USERNAME=admin TCTL_LOGIN_PASSWORD=${tsb_password} tctl login

          sed "s%#CP_CLUSTER#%${cluster_name}%g" /data/artifacts/cp-cluster.yaml.tpl > /data/artifacts/cp-cluster.yaml

          tctl apply -f /data/artifacts/cp-cluster.yaml

          tctl install manifest cluster-operators --registry $HUB | kubectl apply -f -


          tctl install manifest control-plane-secrets  --allow-defaults  --elastic-password $ELASTIC_PASS --elastic-username elastic  --elastic-ca-certificate "$(cat artifacts/es-ca-cert.pem)" --cluster $cluster_name --xcp-certs "$(tctl install cluster-certs --cluster $cluster_name)" | kubectl apply -f -

          if kubectl create secret generic cacerts -n istio-system --from-file artifacts/ca-cert.pem --from-file artifacts/ca-key.pem --from-file artifacts/root-cert.pem --from-file artifacts/cert-chain.pem;then
            echo "cacerts  installed"
          fi
          sed "s%#HUB#%${HUB}%g;s%#MP_HOST#%${MP_ADDRESS}%g;s%#CP_CLUSTER#%${cluster_name}%g" artifacts/cp.yaml.tpl > artifacts/cp.yaml
          sleep 40
          kubectl apply -f artifacts/cp.yaml
        image: $tsbImageRepo/deployer:$tsbImageTag
        imagePullPolicy: Always
        name: tsb-installer
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      

